(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-5ed0"],{"3d40":function(t,e,p){},"7e2f":function(t){t.exports={art10:{path:"art10",title:"一些小段子",date:"2018-8-22",tag:"other",orgAddress:""},art9:{path:"art9",title:"vuex基础概念",date:"2018-8-19",tag:"vue",orgAddress:""},art8:{path:"art8",title:"vue图片懒加载",date:"2018-7-30",tag:"vue",orgAddress:""},art7:{path:"art7",title:"封装继承多态抽象面向对象4大特性",date:"2018-7-21",tag:"js",orgAddress:""},art6:{path:"art6",title:"函数、闭包概念",date:"2018-6-22",tag:"js",orgAddress:""},art5:{path:"art5",title:"js学习记录",date:"2018-6-19",tag:"js",orgAddress:""},art4:{path:"art4",title:"通过数组filter（）方法选取指定的元素",date:"2018-5-30",tag:"js",orgAddress:""},art3:{path:"art3",title:"css常用命名",date:"2018-5-21",tag:"css",orgAddress:""},art2:{path:"art2",title:"HTML语义化标签",date:"2018-4-22",tag:"html",orgAddress:""},art1:{path:"art1",title:"css布局基础",date:"2018-4-19",tag:"css",orgAddress:""}}},"8a1f":function(t,e,p){},b175:function(t,e,p){"use strict";var n=p("8a1f"),o=p.n(n);o.a},c45d:function(t,e,p){"use strict";p.r(e);var n=function(){var t=this,e=t.$createElement,p=t._self._c||e;return p("div",[p("div",{class:{infoShow:this.$store.state.isInfoShow,infoHide:!this.$store.state.isInfoShow}},[p("Header"),p("div",{staticClass:"archive"},[p("div",{staticClass:"article-content"},[p("p",{staticClass:"fontA"},[t._v(t._s(t.artList.title))]),p("p",[t._v(t._s(t.artList.date))]),p("p",[t._v("一、封装性")]),p("p",[t._v("  封装就是把抽象出来的数据和对数据的操作封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作(成员方法)，才能对数据进行操作。\n          \n          　 JS封装只有两种状态，一种是公开的，一种是私有的。\n              案例：")]),p("p",[t._v("    function Person(name,sal){")]),p("p",[t._v("       this.name=name;         //公开")]),p("p",[t._v("     var sal=sal;                 //私有")]),p("p",[t._v("      this.showInfo=function(){ //公开")]),p("p",[t._v('          window.alert(this.name+" "+sal);')]),p("p",[t._v("      }")]),p("p",[t._v("      function showInfo2(){      //把函数私有化")]),p("p",[t._v('        window.alert("你好"+this.name+" "+sal);')]),p("p",[t._v("      }")]),p("p",[t._v("  }")]),p("p",[t._v("  通过构造函数来分配成员方法，给每个对象分配一份独立的代码。这样的弊端就是如果对象实例有很多，那函数的资源占用就会很大，而且有可能造成内存泄漏。\n          通过prototype给所有的对象添加方法，但是这种方式不能去访问类的私有变量和方法。")]),p("p",[t._v(" 原型继承")]),p("p",[t._v("   function A(){  ")]),p("p",[t._v("       this.color = 'red';  ")]),p("p",[t._v(" }  ")]),p("p",[t._v("    function B(){}  ")]),p("p",[t._v("   function C(){}  ")]),p("p",[t._v("    B.prototype = new A();  ")]),p("p",[t._v("    C.prototype = new B(); ")]),p("p",[t._v("     // 测试原型继承 ")]),p("p",[t._v("    var c = new C();")]),p("p",[t._v("    console.log(c.color); // red ")]),p("p",[t._v("     原型继承显得很简单，不需要每次构造都调用父类的构造函数，也不需要通过复制属性的方式就能快速实现继承。但它也存在一些缺点：\n          ① 每个类型只有一个原型，所以不支持多重继承（即一个子类继承自多个父类）。\n          ② 不能很好的支持多参数或动态参数的父类，显得不够灵活。\n          ③ 占用内存多，每次继承都需要实例化一个父类，这样会存在内存占用过多的问题。")]),p("p",[t._v("  混合继承（构造+原型）")]),p("p",[t._v("   混合继承是把多种继承方式一起使用，发挥各个优势，来实现各种复杂的应用。\n          最常见的就是把类继承和原型继承一起使用。做法是将需要独立的属性方法放入构造函数中，而可以共享的部分则放入原型中，这样做可以最大限度节省内存而又保留对象实例的独立性。注意：\n          1、把方法写在原型中比写在构造函数中消耗的内存更小，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份\n          而写在类中的方法，实例化的时候会在每个实例中再复制一份，所以消耗的内存更高。\n          所以没有特殊原因，我们一般把属性写到类中，而行为写到原型中。\n          2、构造函数中定义的属性和方法比原型中定义的属性和方法的优先级高，如果定义了同名称的属性和方法，构造函数中的将会覆盖原型中的。")]),p("p",[t._v("  function A(x,y){  ")]),p("p",[t._v("    this.x = x; ")]),p("p",[t._v("     this.y = y;  ")]),p("p",[t._v(" }  ")]),p("p",[t._v("  A.prototype.add = function(){ ")]),p("p",[t._v("     return (this.x-0) + (this.y-0); ")]),p("p",[t._v(" } ")]),p("p",[t._v("  function B(x,y){ ")]),p("p",[t._v("    A.call(this,x,y); ")]),p("p",[t._v("  }  ")]),p("p",[t._v("  B.prototype = new A(); ")]),p("p",[t._v(" // 测试 ")]),p("p",[t._v("  var b = new B(2,1);")]),p("p",[t._v(" console.log(b.x); // 2 ")]),p("p",[t._v("console.log(b.add()); // 3")]),p("p",[t._v("多重继承")]),p("p",[t._v("继承一般包括单向继承和多向继承，单向继承模式较为简单，每个子类有且仅有一个超类，多重继承是一个比较复杂的继承模式。一个子类可拥有多个超类。JavaScript原型继承不支持多重继承，但可通过混合模式来实现多重继承。下面让类C来继承类A和类B：\n          复制代码")]),p("p",[t._v(" function A(x){ ")]),p("p",[t._v("    this.x = x;  ")]),p("p",[t._v("}")]),p("p",[t._v(" A.prototype.hi = function(){ ")]),p("p",[t._v("    console.log('hi'); ")]),p("p",[t._v("}  ")]),p("p",[t._v("function B(y){ ")]),p("p",[t._v("  this.y = y;  ")]),p("p",[t._v(" } ")]),p("p",[t._v("  B.prototype.hello = function(){")]),p("p",[t._v("   console.log('hello'); ")]),p("p",[t._v(" } ")]),p("P",[t._v("  // 给Function增加extend方法  ")]),p("p",[t._v(" Function.prototype.extend = function(obj) {")]),p("p",[t._v("    for(var item in obj) {  ")]),p("p",[t._v("      this.constructor.prototype[item] = obj[item];")]),p("p",[t._v("   }  ")]),p("p",[t._v(" } ")]),p("p",[t._v(" / 在类C内部实现继承")]),p("p",[t._v(" function C(x,y){  ")]),p("p",[t._v("    A.call(this,x); ")]),p("p",[t._v("    B.call(this,y);")]),p("p",[t._v(" };")]),p("p",[t._v(" C.extend(new A(1));")]),p("p",[t._v("  C.extend(new B(2)); ")]),p("p",[t._v("// 通过复制继承后，C变成了一个对象，不再是构造函数了，可以直接调用 ")]),p("p",[t._v(" C.hi(); // hi  ")]),p("p",[t._v(" C.hello(); // hello")]),p("p",[t._v(" console.log(C.x); // 1 ")]),p("p",[t._v(" console.log(C.y); // 2  ")]),p("p",[t._v("复制代码")]),p("p",[t._v(" 在js中实现类继承，需要设置3点：")]),p("p",[t._v("   ① 在子类构造函数结构体内，使用函数call()调用父类构造函数，把子类的参数传递给调用函数如上面的例子：A.call(this,x) 这样子类可以继承父类的所有属性和方法。\n          ② 在子类和父类之间建立原型链，如上例：B.prototype = new A() 为了实现类的继承必须保证他们原型链上的上下级关系。即设置子类的prototype 属性指向父类的一个实例即可。\n          ③ 恢复子类原型对象的构造函数， 如上例：B.prototype.constructor = B \n          在类继承中，call() 和 apply() 方法被频繁使用，它们之间的功能和用法都是相同的，唯一区别就是第2个参数类型不同。")]),p("p",[t._v("  js如何实现重载")]),p("p",[t._v("   复制代码")]),p("p",[t._v("  //js怎么实现重载.通过判断参数的个数来实现重载")]),p("p",[t._v("  function Person(){ ")]),p("p",[t._v("      this.test1=function (){ ")]),p("p",[t._v("      if(arguments.length==1){ ")]),p("p",[t._v("           this.show1(arguments[0]); ")]),p("p",[t._v("    }else if(arguments.length==2){ ")]),p("p",[t._v("        this.show2(arguments[0],arguments[1]);")]),p("p",[t._v("    }else if(arguments.length==3){ ")]),p("p",[t._v("      this.show3(arguments[0],arguments[1],arguments[2]);")]),p("p",[t._v("   } ")]),p("p",[t._v("}")]),p("p",[t._v("  this.show1=function(a){ ")]),p("p",[t._v('    window.alert("show1()被调用"+a);')]),p("p",[t._v(" } ")]),p("p",[t._v(" this.show2=function(a,b){ ")]),p("p",[t._v(' window.alert("show2()被调用"+"--"+a+"--"+b);')]),p("p",[t._v("} ")]),p("p",[t._v(" function show3(a,b,c){ ")]),p("p",[t._v('    window.alert("show3()被调用"); ')]),p("p",[t._v("  } ")]),p("p",[t._v(" }")]),p("p",[t._v(" var p1=new Person(); ")]),p("p",[t._v(" //js中不支持重载. ")]),p("p",[t._v(' p1.test1("a","b"); ')]),p("p",[t._v(' p1.test1("a");')])],1)]),p("Footer")],1),p("Siteinfo")],1)},o=[],s=(p("3d40"),p("0418")),a=p("fd2d"),v=p("78d1"),i=p("7e2f"),r={data:function(){return{artList:""}},mounted:function(){this.getArticle()},components:{Header:s["a"],Footer:a["a"],Siteinfo:v["a"]},methods:{getArticle:function(){this.artList=i.art7}}},_=r,l=(p("b175"),p("2877")),c=Object(l["a"])(_,n,o,!1,null,"7e8b14a3",null);c.options.__file="art7.vue";e["default"]=c.exports}}]);
//# sourceMappingURL=chunk-5ed0.4bb667e9.js.map