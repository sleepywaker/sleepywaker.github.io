{"version":3,"sources":["webpack:///./src/views/articles/art7.vue?46b1","webpack:///./src/views/articles/art7.vue?36e0","webpack:///src/views/articles/art7.vue","webpack:///./src/views/articles/art7.vue?2ef8","webpack:///./src/views/articles/art7.vue"],"names":["_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_art7_vue_vue_type_style_index_0_id_7e8b14a3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","render","_vm","this","_h","$createElement","_c","_self","class","infoShow","$store","state","isInfoShow","infoHide","staticClass","_v","_s","artList","title","date","staticRenderFns","art7vue_type_script_lang_js_","data","mounted","getArticle","components","Header","Footer","Siteinfo","methods","assets_articles","art7","articles_art7vue_type_script_lang_js_","component","Object","componentNormalizer","options","__file","__webpack_exports__"],"mappings":"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","file":"js/chunk-5ed0.4bb667e9.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/lib/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./art7.vue?vue&type=style&index=0&id=7e8b14a3&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/lib/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./art7.vue?vue&type=style&index=0&id=7e8b14a3&scoped=true&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{class:{infoShow:this.$store.state.isInfoShow,infoHide:!this.$store.state.isInfoShow}},[_c('Header'),_c('div',{staticClass:\"archive\"},[_c('div',{staticClass:\"article-content\"},[_c('p',{staticClass:\"fontA\"},[_vm._v(_vm._s(_vm.artList.title))]),_c('p',[_vm._v(_vm._s(_vm.artList.date))]),_c('p',[_vm._v(\"一、封装性\")]),_c('p',[_vm._v(\"  封装就是把抽象出来的数据和对数据的操作封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作(成员方法)，才能对数据进行操作。\\n          \\n          　 JS封装只有两种状态，一种是公开的，一种是私有的。\\n              案例：\")]),_c('p',[_vm._v(\"    function Person(name,sal){\")]),_c('p',[_vm._v(\"       this.name=name;         //公开\")]),_c('p',[_vm._v(\"     var sal=sal;                 //私有\")]),_c('p',[_vm._v(\"      this.showInfo=function(){ //公开\")]),_c('p',[_vm._v(\"          window.alert(this.name+\\\" \\\"+sal);\")]),_c('p',[_vm._v(\"      }\")]),_c('p',[_vm._v(\"      function showInfo2(){      //把函数私有化\")]),_c('p',[_vm._v(\"        window.alert(\\\"你好\\\"+this.name+\\\" \\\"+sal);\")]),_c('p',[_vm._v(\"      }\")]),_c('p',[_vm._v(\"  }\")]),_c('p',[_vm._v(\"  通过构造函数来分配成员方法，给每个对象分配一份独立的代码。这样的弊端就是如果对象实例有很多，那函数的资源占用就会很大，而且有可能造成内存泄漏。\\n          通过prototype给所有的对象添加方法，但是这种方式不能去访问类的私有变量和方法。\")]),_c('p',[_vm._v(\" 原型继承\")]),_c('p',[_vm._v(\"   function A(){  \")]),_c('p',[_vm._v(\"       this.color = 'red';  \")]),_c('p',[_vm._v(\" }  \")]),_c('p',[_vm._v(\"    function B(){}  \")]),_c('p',[_vm._v(\"   function C(){}  \")]),_c('p',[_vm._v(\"    B.prototype = new A();  \")]),_c('p',[_vm._v(\"    C.prototype = new B(); \")]),_c('p',[_vm._v(\"     // 测试原型继承 \")]),_c('p',[_vm._v(\"    var c = new C();\")]),_c('p',[_vm._v(\"    console.log(c.color); // red \")]),_c('p',[_vm._v(\"     原型继承显得很简单，不需要每次构造都调用父类的构造函数，也不需要通过复制属性的方式就能快速实现继承。但它也存在一些缺点：\\n          ① 每个类型只有一个原型，所以不支持多重继承（即一个子类继承自多个父类）。\\n          ② 不能很好的支持多参数或动态参数的父类，显得不够灵活。\\n          ③ 占用内存多，每次继承都需要实例化一个父类，这样会存在内存占用过多的问题。\")]),_c('p',[_vm._v(\"  混合继承（构造+原型）\")]),_c('p',[_vm._v(\"   混合继承是把多种继承方式一起使用，发挥各个优势，来实现各种复杂的应用。\\n          最常见的就是把类继承和原型继承一起使用。做法是将需要独立的属性方法放入构造函数中，而可以共享的部分则放入原型中，这样做可以最大限度节省内存而又保留对象实例的独立性。注意：\\n          1、把方法写在原型中比写在构造函数中消耗的内存更小，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份\\n          而写在类中的方法，实例化的时候会在每个实例中再复制一份，所以消耗的内存更高。\\n          所以没有特殊原因，我们一般把属性写到类中，而行为写到原型中。\\n          2、构造函数中定义的属性和方法比原型中定义的属性和方法的优先级高，如果定义了同名称的属性和方法，构造函数中的将会覆盖原型中的。\")]),_c('p',[_vm._v(\"  function A(x,y){  \")]),_c('p',[_vm._v(\"    this.x = x; \")]),_c('p',[_vm._v(\"     this.y = y;  \")]),_c('p',[_vm._v(\" }  \")]),_c('p',[_vm._v(\"  A.prototype.add = function(){ \")]),_c('p',[_vm._v(\"     return (this.x-0) + (this.y-0); \")]),_c('p',[_vm._v(\" } \")]),_c('p',[_vm._v(\"  function B(x,y){ \")]),_c('p',[_vm._v(\"    A.call(this,x,y); \")]),_c('p',[_vm._v(\"  }  \")]),_c('p',[_vm._v(\"  B.prototype = new A(); \")]),_c('p',[_vm._v(\" // 测试 \")]),_c('p',[_vm._v(\"  var b = new B(2,1);\")]),_c('p',[_vm._v(\" console.log(b.x); // 2 \")]),_c('p',[_vm._v(\"console.log(b.add()); // 3\")]),_c('p',[_vm._v(\"多重继承\")]),_c('p',[_vm._v(\"继承一般包括单向继承和多向继承，单向继承模式较为简单，每个子类有且仅有一个超类，多重继承是一个比较复杂的继承模式。一个子类可拥有多个超类。JavaScript原型继承不支持多重继承，但可通过混合模式来实现多重继承。下面让类C来继承类A和类B：\\n          复制代码\")]),_c('p',[_vm._v(\" function A(x){ \")]),_c('p',[_vm._v(\"    this.x = x;  \")]),_c('p',[_vm._v(\"}\")]),_c('p',[_vm._v(\" A.prototype.hi = function(){ \")]),_c('p',[_vm._v(\"    console.log('hi'); \")]),_c('p',[_vm._v(\"}  \")]),_c('p',[_vm._v(\"function B(y){ \")]),_c('p',[_vm._v(\"  this.y = y;  \")]),_c('p',[_vm._v(\" } \")]),_c('p',[_vm._v(\"  B.prototype.hello = function(){\")]),_c('p',[_vm._v(\"   console.log('hello'); \")]),_c('p',[_vm._v(\" } \")]),_c('P',[_vm._v(\"  // 给Function增加extend方法  \")]),_c('p',[_vm._v(\" Function.prototype.extend = function(obj) {\")]),_c('p',[_vm._v(\"    for(var item in obj) {  \")]),_c('p',[_vm._v(\"      this.constructor.prototype[item] = obj[item];\")]),_c('p',[_vm._v(\"   }  \")]),_c('p',[_vm._v(\" } \")]),_c('p',[_vm._v(\" / 在类C内部实现继承\")]),_c('p',[_vm._v(\" function C(x,y){  \")]),_c('p',[_vm._v(\"    A.call(this,x); \")]),_c('p',[_vm._v(\"    B.call(this,y);\")]),_c('p',[_vm._v(\" };\")]),_c('p',[_vm._v(\" C.extend(new A(1));\")]),_c('p',[_vm._v(\"  C.extend(new B(2)); \")]),_c('p',[_vm._v(\"// 通过复制继承后，C变成了一个对象，不再是构造函数了，可以直接调用 \")]),_c('p',[_vm._v(\" C.hi(); // hi  \")]),_c('p',[_vm._v(\" C.hello(); // hello\")]),_c('p',[_vm._v(\" console.log(C.x); // 1 \")]),_c('p',[_vm._v(\" console.log(C.y); // 2  \")]),_c('p',[_vm._v(\"复制代码\")]),_c('p',[_vm._v(\" 在js中实现类继承，需要设置3点：\")]),_c('p',[_vm._v(\"   ① 在子类构造函数结构体内，使用函数call()调用父类构造函数，把子类的参数传递给调用函数如上面的例子：A.call(this,x) 这样子类可以继承父类的所有属性和方法。\\n          ② 在子类和父类之间建立原型链，如上例：B.prototype = new A() 为了实现类的继承必须保证他们原型链上的上下级关系。即设置子类的prototype 属性指向父类的一个实例即可。\\n          ③ 恢复子类原型对象的构造函数， 如上例：B.prototype.constructor = B \\n          在类继承中，call() 和 apply() 方法被频繁使用，它们之间的功能和用法都是相同的，唯一区别就是第2个参数类型不同。\")]),_c('p',[_vm._v(\"  js如何实现重载\")]),_c('p',[_vm._v(\"   复制代码\")]),_c('p',[_vm._v(\"  //js怎么实现重载.通过判断参数的个数来实现重载\")]),_c('p',[_vm._v(\"  function Person(){ \")]),_c('p',[_vm._v(\"      this.test1=function (){ \")]),_c('p',[_vm._v(\"      if(arguments.length==1){ \")]),_c('p',[_vm._v(\"           this.show1(arguments[0]); \")]),_c('p',[_vm._v(\"    }else if(arguments.length==2){ \")]),_c('p',[_vm._v(\"        this.show2(arguments[0],arguments[1]);\")]),_c('p',[_vm._v(\"    }else if(arguments.length==3){ \")]),_c('p',[_vm._v(\"      this.show3(arguments[0],arguments[1],arguments[2]);\")]),_c('p',[_vm._v(\"   } \")]),_c('p',[_vm._v(\"}\")]),_c('p',[_vm._v(\"  this.show1=function(a){ \")]),_c('p',[_vm._v(\"    window.alert(\\\"show1()被调用\\\"+a);\")]),_c('p',[_vm._v(\" } \")]),_c('p',[_vm._v(\" this.show2=function(a,b){ \")]),_c('p',[_vm._v(\" window.alert(\\\"show2()被调用\\\"+\\\"--\\\"+a+\\\"--\\\"+b);\")]),_c('p',[_vm._v(\"} \")]),_c('p',[_vm._v(\" function show3(a,b,c){ \")]),_c('p',[_vm._v(\"    window.alert(\\\"show3()被调用\\\"); \")]),_c('p',[_vm._v(\"  } \")]),_c('p',[_vm._v(\" }\")]),_c('p',[_vm._v(\" var p1=new Person(); \")]),_c('p',[_vm._v(\" //js中不支持重载. \")]),_c('p',[_vm._v(\" p1.test1(\\\"a\\\",\\\"b\\\"); \")]),_c('p',[_vm._v(\" p1.test1(\\\"a\\\");\")])],1)]),_c('Footer')],1),_c('Siteinfo')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n        <div>\r\n          <div :class=\"{infoShow:this.$store.state.isInfoShow,infoHide:!this.$store.state.isInfoShow}\">\r\n          <Header/>\r\n          <div class=\"archive\">\r\n              <div class=\"article-content\"> \r\n                  <p class=\"fontA\">{{artList.title}}</p>\r\n                  <p>{{artList.date}}</p>\r\n                  <p>一、封装性</p>\r\n\r\n                 <p>  封装就是把抽象出来的数据和对数据的操作封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作(成员方法)，才能对数据进行操作。\r\n                  \r\n                  　 JS封装只有两种状态，一种是公开的，一种是私有的。\r\n                      案例：</p>\r\n              <p>    function Person(name,sal){</p>\r\n             <p>       this.name=name;         //公开</p>  \r\n               <p>     var sal=sal;                 //私有</p>  \r\n               <p>      this.showInfo=function(){ //公开</p> \r\n               <p>          window.alert(this.name+\" \"+sal);</p> \r\n               <p>      }</p> \r\n                <p>      function showInfo2(){      //把函数私有化</p>\r\n                <p>        window.alert(\"你好\"+this.name+\" \"+sal);</p>  \r\n                <p>      }</p>\r\n                <p>  }</p>\r\n \r\n                 <p>  通过构造函数来分配成员方法，给每个对象分配一份独立的代码。这样的弊端就是如果对象实例有很多，那函数的资源占用就会很大，而且有可能造成内存泄漏。\r\n                  通过prototype给所有的对象添加方法，但是这种方式不能去访问类的私有变量和方法。</p>\r\n                  \r\n                <p> 原型继承</p> \r\n              <p>   function A(){  </p> \r\n               <p>       this.color = 'red';  </p>\r\n                <p> }  </p> \r\n              <p>    function B(){}  </p>\r\n               <p>   function C(){}  </p>\r\n              <p>    B.prototype = new A();  </p>\r\n              <p>    C.prototype = new B(); </p> \r\n            <p>     // 测试原型继承 </p>  \r\n             <p>    var c = new C();</p>   \r\n              <p>    console.log(c.color); // red </p>\r\n                  \r\n             <p>     原型继承显得很简单，不需要每次构造都调用父类的构造函数，也不需要通过复制属性的方式就能快速实现继承。但它也存在一些缺点：\r\n                  ① 每个类型只有一个原型，所以不支持多重继承（即一个子类继承自多个父类）。\r\n                  ② 不能很好的支持多参数或动态参数的父类，显得不够灵活。\r\n                  ③ 占用内存多，每次继承都需要实例化一个父类，这样会存在内存占用过多的问题。</p>\r\n                  \r\n               <p>  混合继承（构造+原型）</p> \r\n                  \r\n               <p>   混合继承是把多种继承方式一起使用，发挥各个优势，来实现各种复杂的应用。\r\n                  最常见的就是把类继承和原型继承一起使用。做法是将需要独立的属性方法放入构造函数中，而可以共享的部分则放入原型中，这样做可以最大限度节省内存而又保留对象实例的独立性。注意：\r\n                  1、把方法写在原型中比写在构造函数中消耗的内存更小，因为在内存中一个类的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在实例的内存中再复制一份\r\n                  而写在类中的方法，实例化的时候会在每个实例中再复制一份，所以消耗的内存更高。\r\n                  所以没有特殊原因，我们一般把属性写到类中，而行为写到原型中。\r\n                  2、构造函数中定义的属性和方法比原型中定义的属性和方法的优先级高，如果定义了同名称的属性和方法，构造函数中的将会覆盖原型中的。</p>\r\n               <p>  function A(x,y){  </p> \r\n                <p>    this.x = x; </p>   \r\n                <p>     this.y = y;  </p> \r\n               <p> }  </p>  \r\n               <p>  A.prototype.add = function(){ </p>  \r\n                <p>     return (this.x-0) + (this.y-0); </p>  \r\n                <p> } </p>  \r\n               <p>  function B(x,y){ </p>  \r\n                 <p>    A.call(this,x,y); </p>  \r\n                <p>  }  </p>\r\n                <p>  B.prototype = new A(); </p> \r\n                  \r\n                <p> // 测试 </p>  \r\n                <p>  var b = new B(2,1);</p>  \r\n                 <p> console.log(b.x); // 2 </p> \r\n                 <p>console.log(b.add()); // 3</p> \r\n                  \r\n                  \r\n                 <p>多重继承</p> \r\n                  \r\n                 <p>继承一般包括单向继承和多向继承，单向继承模式较为简单，每个子类有且仅有一个超类，多重继承是一个比较复杂的继承模式。一个子类可拥有多个超类。JavaScript原型继承不支持多重继承，但可通过混合模式来实现多重继承。下面让类C来继承类A和类B：\r\n                  复制代码</p> \r\n                 <p> function A(x){ </p> \r\n                  <p>    this.x = x;  </p>\r\n                 <p>}</p>   \r\n                 <p> A.prototype.hi = function(){ </p> \r\n                  <p>    console.log('hi'); </p> \r\n                 <p>}  </p> \r\n                 <p>function B(y){ </p>  \r\n                  <p>  this.y = y;  </p>  \r\n                  <p> } </p> \r\n                 <p>  B.prototype.hello = function(){</p>  \r\n                   <p>   console.log('hello'); </p> \r\n                  <p> } </p> \r\n                <P>  // 给Function增加extend方法  </P>\r\n                 <p> Function.prototype.extend = function(obj) {</p>  \r\n                  <p>    for(var item in obj) {  </p>\r\n                  <p>      this.constructor.prototype[item] = obj[item];</p>    \r\n                  <p>   }  </p> \r\n                 <p> } </p> \r\n                 <p> / 在类C内部实现继承</p>  \r\n                 <p> function C(x,y){  </p>\r\n                 <p>    A.call(this,x); </p>  \r\n                  <p>    B.call(this,y);</p>  \r\n                 <p> };</p>  \r\n                 <p> C.extend(new A(1));</p>  \r\n                <p>  C.extend(new B(2)); </p> \r\n                  \r\n                 <p>// 通过复制继承后，C变成了一个对象，不再是构造函数了，可以直接调用 </p>  \r\n                <p> C.hi(); // hi  </p> \r\n               <p> C.hello(); // hello</p>    \r\n                 <p> console.log(C.x); // 1 </p> \r\n                 <p> console.log(C.y); // 2  </p>\r\n                 <p>复制代码</p> \r\n                <p> 在js中实现类继承，需要设置3点：</p> \r\n                  \r\n              <p>   ① 在子类构造函数结构体内，使用函数call()调用父类构造函数，把子类的参数传递给调用函数如上面的例子：A.call(this,x) 这样子类可以继承父类的所有属性和方法。\r\n                  ② 在子类和父类之间建立原型链，如上例：B.prototype = new A() 为了实现类的继承必须保证他们原型链上的上下级关系。即设置子类的prototype 属性指向父类的一个实例即可。\r\n                  ③ 恢复子类原型对象的构造函数， 如上例：B.prototype.constructor = B \r\n                  在类继承中，call() 和 apply() 方法被频繁使用，它们之间的功能和用法都是相同的，唯一区别就是第2个参数类型不同。</p> \r\n                  \r\n                  \r\n              <p>  js如何实现重载</p>  \r\n                  \r\n              <p>   复制代码</p> \r\n              <p>  //js怎么实现重载.通过判断参数的个数来实现重载</p>   \r\n               <p>  function Person(){ </p> \r\n                <p>      this.test1=function (){ </p>\r\n                 <p>      if(arguments.length==1){ </p>   \r\n                  <p>           this.show1(arguments[0]); </p> \r\n                   <p>    }else if(arguments.length==2){ </p>   \r\n                    <p>        this.show2(arguments[0],arguments[1]);</p>   \r\n                    <p>    }else if(arguments.length==3){ </p>  \r\n                       <p>      this.show3(arguments[0],arguments[1],arguments[2]);</p>  \r\n                      <p>   } </p> \r\n                     <p>}</p>  \r\n                    <p>  this.show1=function(a){ </p>\r\n                     <p>    window.alert(\"show1()被调用\"+a);</p>  \r\n                     <p> } </p>\r\n                     <p> this.show2=function(a,b){ </p>\r\n                        <p> window.alert(\"show2()被调用\"+\"--\"+a+\"--\"+b);</p>  \r\n                    <p>} </p> \r\n                     <p> function show3(a,b,c){ </p>\r\n                    <p>    window.alert(\"show3()被调用\"); </p>  \r\n                    <p>  } </p>\r\n                 <p> }</p> \r\n                <p> var p1=new Person(); </p> \r\n                <p> //js中不支持重载. </p>\r\n                 <p> p1.test1(\"a\",\"b\"); </p>\r\n                <p> p1.test1(\"a\");</p> \r\n              </div>\r\n          </div>\r\n          <Footer/>\r\n          </div>\r\n          <Siteinfo/>\r\n        </div>\r\n      </template>\r\n        \r\n      <script>\r\n      import './../../assets/css/articles.css'\r\n      import Header from '@/components/Header.vue'\r\n      import Footer from '@/components/Footer.vue'\r\n      import Siteinfo from '@/components/Siteinfo.vue'\r\n      import articles from './../../assets/articles.json'\r\n        export default {\r\n          data(){\r\n            return {\r\n              artList:'',\r\n            }\r\n          },\r\n          mounted(){\r\n            this.getArticle()\r\n          },\r\n          components:{\r\n            Header,\r\n            Footer,\r\n            Siteinfo\r\n          },\r\n          methods:{\r\n            getArticle(){\r\n              this.artList=articles.art7; \r\n            }\r\n          }\r\n        }\r\n      </script>\r\n      <style scoped>\r\n        .archive{\r\n          min-height:calc(100vh - 210px);\r\n          box-sizing:border-box;\r\n          width:100%;\r\n          background-color:#BBE4FF;\r\n        }\r\n        .title{\r\n          display:block;\r\n        }\r\n        @keyframes in{\r\n          from{\r\n            padding-right:0;\r\n            }\r\n          to{\r\n            padding-right:320px;\r\n            }\r\n        }\r\n        @keyframes out{\r\n          from{\r\n            padding-right:320px;\r\n          }\r\n          to{\r\n            padding-right:0;\r\n          }\r\n        }\r\n      .infoShow{\r\n          padding-right:320px;\r\n          animation:in 0.5s ease-out;\r\n        }\r\n      .infoHide{\r\n          padding-right:0;\r\n          animation:out 0.5s ease-out;\r\n        }\r\n      </style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./art7.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./art7.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./art7.vue?vue&type=template&id=7e8b14a3&scoped=true&\"\nimport script from \"./art7.vue?vue&type=script&lang=js&\"\nexport * from \"./art7.vue?vue&type=script&lang=js&\"\nimport style0 from \"./art7.vue?vue&type=style&index=0&id=7e8b14a3&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7e8b14a3\",\n  null\n  \n)\n\ncomponent.options.__file = \"art7.vue\"\nexport default component.exports"],"sourceRoot":""}